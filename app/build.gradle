
buildscript {
    ext {
        // --- Languages / framworks
        lombokVersion              = '1.18.22'
        apacheLangVersion          = '3.12.0'
        hibernateValidatorVersion  = '7.0.2.Final'
        jacksonVersion             = '2.10.1'

        // --- Testing ---
        // --- unit testing
        junitVersion               = '5.8.2'
        hamcrestVersion            = '2.2'
        serenityVersion            = '2.0.83'
        cucumberReportsVersion     = '4.11.2'


        // ===== Quality checks =====
        // --- Coding practies (static analysis) ---
        // --- Coding style
        checkstyleVersion          = '9.0.1'
        // --- Common Coding flaws
        pmdVersion                 = '6.41.0'

        // --- Testing ---
        // Unit testing
        junitVersion               = '5.8.2'
        // --- Code coverage
        pitVersion                 = '1.7.3'
        // --- BDD
        karateVersion              = '1.1.0'

        // --- Documentation ---
        asciiDoctorVersion         = '1.5.6'
    }

    repositories {
        mavenLocal()
    }

    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:${serenityVersion}")
        classpath 'be.jlr-home.gradle:plantumlPlugin:0.1.+'
     }
}

plugins {
    // --- Artifact
    // Apply the java-library plugin for API and implementation separation.
    id 'application'

    // --- annotation processors
    id "io.freefair.lombok" version "6.3.0"

    // ===== Frameworks =====
    // --- Spring boot
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    // --- Stability


    // ===== Quality Assurance =====
    // --- Static Analysis
    // --- PMD
    id 'pmd'
    // --- Style
    id 'checkstyle'
    // --- Coverage
    id 'jacoco'
    // --- Mutation testing
    id 'info.solidsoft.pitest' version '1.7.0'


    // ===== Configuration Management =====
    // id "net.nemerosa.versioning" version "2.9.0"
    // id "com.gorylenko.gradle-git-properties" version "2.3.2"
    // id 'maven-publish'

    // ===== Documentation =====
    // id 'org.asciidoctor.convert' version '1.5.8'

    // id 'project-report'
    // id 'build-dashboard'
    // id 'net.serenity-bdd.aggregator' version "${serenityVersion}"

}




repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

ext {
	// set('snippetsDir', file("build/generated-snippets"))
	// set('springCloudVersion', "Hoxton.BUILD-SNAPSHOT")
	// set('springCloudVersion', "Hoxton.SR3")
    set( 'springCloudVersion', "2021.0.0" )
}


dependencies {
    // This dependency is used by the application.
    // implementation 'com.google.guava:guava:30.1.1-jre'

    // ===== Frameworks =====
    // --- Spring boot
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'

    // --- Traceability
    // --- Instrumentation
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    // --- Stability
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // ===== Persistence =====
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.liquibase:liquibase-core'
    // --- Database
    runtimeOnly 'com.h2database:h2'
    // runtimeOnly 'org.postgresql:postgresql'



    // ===== Quality Assurance =====
    // --- Static Analysis
    // --- PMD
    // --- Style
    // --- Unit testing
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    // --- Coverage
    // --- Mutation testing
    testRuntimeOnly( 'org.pitest:pitest-junit5-plugin:0.15' )
    // --- BDD
    testImplementation( "com.intuit.karate:karate-junit5:${karateVersion}" )

    // --- Reporting

    // ===== Documentation =====
    // --- Config properties
    annotationProcessor( "org.springframework.boot:spring-boot-configuration-processor" )
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}


application {
    // Define the main class for the application.
    mainClass = 'com.discover.loan.origination.throttle.Application'
}

group = 'com.discover.loan'

sourceCompatibility = '17'
targetCompatibility = "${sourceCompatibility}"


configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}

    bddImplementation.extendsFrom testImplementation
}


// ===== Testing =====
sourceSets {
    // test {
    //     resources {
    //         srcDir file('src/test/java')
    //         exclude '**/*.java'
    //     }
    // }

    bdd {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        resources {
            srcDir file('src/bdd/features')
            exclude '**/*.java'
        }
    }
}



// --- Unit Testing
test {
    // finalizedBy jacocoTestReport

    // Use junit platform for unit tests
    useJUnitPlatform()

    jacoco {
        excludes = [ '**/Application.*' ]
    }
}

check {
    dependsOn {
        jacocoTestCoverageVerification
    }
}

// testing {
//     suites {
//         // Configure the built-in test suite
//         test {
//             // Use JUnit Jupiter test framework
//             useJUnitJupiter('5.7.2')
//         }
//     }
// }

// --- BDD Testing
task bdd(type: Test) {
    group 'Verification'
    description 'runs the BDD tests with Cucumber/Selenium/Karate'

    testClassesDirs = sourceSets.bdd.output.classesDirs
    classpath       = sourceSets.bdd.runtimeClasspath

    mustRunAfter test
	useJUnitPlatform()

    // pull karate options into the runtime
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    // pull karate env into the runtime
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    // ensure tests are always run
    outputs.upToDateWhen { false }
}

// ===== Static Code Analysis =====

// ----- Checkstyle -----
checkstyle {
    showViolations = false
    toolVersion = "${checkstyleVersion}"
    // checkstyle.xml copy from:
    // https://raw.githubusercontent.com/checkstyle/checkstyle/checkstyle-8.6/src/main/resources/google_checks.xml
    // the version should be as same as plugin version
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}


// ----- PMD -----
pmd {
    consoleOutput = false
    ignoreFailures = true       // Don't interrupt the build
    toolVersion = "${pmdVersion}"
    ruleSetFiles = files("${rootDir}/config/pmd/pmd.xml")
    ruleSets = []
}


// --- Coverage (Jacoco) ---

// See this page for options https://reflectoring.io/jacoco/
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            limit {
                counter = 'LINE'
                value   = 'COVEREDRATIO'
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.5
            }
        }
    }
}


jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "com/discover/**/ExcludedPOJO.class"
                // "com/discover/**/*DTO.*",
                // "**/config/*"
            ])
        }))
    }
}


// --- Mutation Tests
pitest {
    verbose = false
    // testSourceSets = [sourceSets.test]
    // mainSourceSets = [sourceSets.main]
    targetClasses = ['com.discover.loan.*']  //by default "${project.group}.*"
    // targetClasses = ['com.example.security.*']  //by default "${project.group}.*"
    pitestVersion = "${pitVersion}" //not needed when a default PIT version should be used
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    withHistory = true
    // mutators = ['DEFAULTS', 'STRONGER', 'ALL']
    mutators = ['DEFAULTS', 'STRONGER' ]
}



// ##### Run the service
bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    systemProperties = System.properties
}
